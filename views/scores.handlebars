<!DOCTYPE html>
<html lang="en">
<head>
    <title>Chore App</title>
    <meta charset="utf-8">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <link href="css/home.css" rel="stylesheet">
    <link href="chartistDist/chartist.min.css" rel="stylesheet">
    <meta name="viewport" content="width=device-width, initial-scale=1">
</head>
<body>
<script src="/chartistDist/chartist.min.js"></script>

<nav class="navbar navbar-inverse">
    <div class="row">
        <div class="col-xs-2 col-md-1">
            <div class="navbar-header">
                <button style="font-size: 250%;" class="btn-transparent dropdown-toggle" type="button" data-toggle="dropdown">
                    <span class="glyphicon glyphicon-menu-hamburger"></span>
                </button>
                <ul class="dropdown-menu">
                    <li><a href="/home"><span class="glyphicon glyphicon-home"></span>&nbsp; My Chores</a></li>
                    <li><a href="/roommate_chores"><span class="glyphicon glyphicon-user"></span>&nbsp; Roommates' Chores</a></li>
                    <li><a href="/scores"><span class="glyphicon glyphicon-stats"></span>&nbsp; Scores</a></li>
                    <li><a href="/preferences"><span class="glyphicon glyphicon-heart"></span>&nbsp; Preferences</a></li>
                    <li><a href="/settings"><span class="glyphicon glyphicon-wrench"></span>&nbsp; Settings</a></li>
                </ul>
            </div>
        </div>
        <div class="col-xs-3 col-md-6">
            <h1 id="app-name">Chore Hero</h1>
        </div>
        <div class="col-xs-3 col-md-1 pull-right">
            <div class="well" id="score-label">
                70
            </div>
        </div>
        <div class="col-xs-4 col-md-4 pull-right">
            <div class="progress">
                <div class="progress-bar" id="score-bar" role="progressbar" aria-valuenow="70"
              aria-valuemin="0" aria-valuemax="100" style="width:70%">
                </div>
            </div>
        </div>
    </div>
</nav>

<h1 class="text-center">Scores</h1>
    <div class="row">
        <div class="col-xs-12 col-md-8 col-md-offset-2"><hr>
        </div>
    </div>

<div class="ct-chart ct-major-twelfth" id="chart2"></div>
<div class="ct-chart ct-major-twelfth" id="chart1"></div>

<script>
  // Initialize a Line chart in the container with the ID chart1
  new Chartist.Line('#chart1', {
  labels: ['Week 1', 'Week 2', 'Week 3', 'Week 4', 'Week 5'],
  series: [
    [60, 70, 80, 90, 100],
    [60, 50, 40, 30, 0],
    [60, 80, 0, 40, 60]
  ]
  } , {
  fullWidth: true,
  chartPadding: {
    right: 40
  }
  });

    var chart = new Chartist.Pie('#chart2', {
      series: [60, 40],
      labels: [1, 2]
    }, {
      donut: true,
      showLabel: true
    });

    chart.on('draw', function(data) {
      if(data.type === 'slice') {
        // Get the total path length in order to use for dash array animation
        var pathLength = data.element._node.getTotalLength();

        // Set a dasharray that matches the path length as prerequisite to animate dashoffset
        data.element.attr({
          'stroke-dasharray': pathLength + 'px ' + pathLength + 'px'
        });

        // Create animation definition while also assigning an ID to the animation for later sync usage
        var animationDefinition = {
          'stroke-dashoffset': {
            id: 'anim' + data.index,
            dur: 1000,
            from: -pathLength + 'px',
            to:  '0px',
            easing: Chartist.Svg.Easing.easeOutQuint,
            // We need to use `fill: 'freeze'` otherwise our animation will fall back to initial (not visible)
            fill: 'freeze'
          }
        };

        // If this was not the first slice, we need to time the animation so that it uses the end sync event of the previous animation
        if(data.index !== 0) {
          animationDefinition['stroke-dashoffset'].begin = 'anim' + (data.index - 1) + '.end';
        }

        // We need to set an initial value before the animation starts as we are not in guided mode which would do that for us
        data.element.attr({
          'stroke-dashoffset': -pathLength + 'px'
        });

        // We can't use guided mode as the animations need to rely on setting begin manually
        // See http://gionkunz.github.io/chartist-js/api-documentation.html#chartistsvg-function-animate
        data.element.animate(animationDefinition, false);
      }
    });

    // For the sake of the example we update the chart every time it's created with a delay of 8 seconds
    chart.on('created', function() {
      if(window.__anim21278907124) {
        clearTimeout(window.__anim21278907124);
        window.__anim21278907124 = null;
      }
      window.__anim21278907124 = setTimeout(chart.update.bind(chart), 10000);
    });



</script>

<!--
<footer class="container-fluid text-center">
    <p>Footer Text</p>
</footer>
-->

</body>
</html>